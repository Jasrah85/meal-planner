// --- required blocks ---
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- pantry / inventory ---

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  pantries  Pantry[]
  createdAt DateTime  @default(now())
}

model Pantry {
  id        Int       @id @default(autoincrement())
  name      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     Item[]
  createdAt DateTime  @default(now())
}

model Item {
  id         Int       @id @default(autoincrement())
  name       String
  quantity   Int       @default(1)
  pantryId   Int
  pantry     Pantry    @relation(fields: [pantryId], references: [id], onDelete: Cascade)
  barcodeId  Int?
  barcode    Barcode?  @relation(fields: [barcodeId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // back-relation to Ingredient.itemMatch
  ingredientMatches Ingredient[]
}

model Barcode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  label     String?
  items     Item[]
  createdAt DateTime @default(now())

  // back-relation to Ingredient.barcode
  ingredients Ingredient[]
}

// --- recipes ---

model Recipe {
  id          Int          @id @default(autoincrement())
  title       String
  sourceType  String?
  sourceUrl   String?
  servings    Int?
  notes       String?
  steps       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  ingredients Ingredient[]
  tags        RecipeTag[]
}

model Ingredient {
  id          Int       @id @default(autoincrement())
  recipeId    Int
  name        String
  qty         Float?
  unit        String?

  // optional mappings for smarter matching
  barcodeId   Int?
  barcode     Barcode?  @relation(fields: [barcodeId], references: [id])

  itemMatchId Int?
  itemMatch   Item?     @relation(fields: [itemMatchId], references: [id])

  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model RecipeTag {
  id       Int     @id @default(autoincrement())
  recipeId Int
  value    String

  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId, value])
  @@unique([recipeId, value], name: "recipe_tag_unique")
}
